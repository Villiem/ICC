diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index bc7557e..0922e3e 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -27,6 +27,10 @@ public class Estudiante {
                       double promedio,
                       int    edad) {
         // Aquí va su código.
+        this.nombre = nombre;
+        this.cuenta = cuenta;
+        this.promedio = promedio;
+        this.edad = edad;
     }
 
     /**
@@ -35,6 +39,7 @@ public class Estudiante {
      */
     public String getNombre() {
         // Aquí va su código.
+        return nombre;
     }
 
     /**
@@ -43,6 +48,7 @@ public class Estudiante {
      */
     public void setNombre(String nombre) {
         // Aquí va su código.
+        this.nombre = nombre;
     }
 
     /**
@@ -51,6 +57,7 @@ public class Estudiante {
      */
     public int getCuenta() {
         // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -59,6 +66,7 @@ public class Estudiante {
      */
     public void setCuenta(int cuenta) {
         // Aquí va su código.
+        this.cuenta = cuenta;
     }
 
     /**
@@ -67,6 +75,7 @@ public class Estudiante {
      */
     public double getPromedio() {
         // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -75,6 +84,7 @@ public class Estudiante {
      */
     public void setPromedio(double promedio) {
         // Aquí va su código.
+        this.promedio = promedio;
     }
 
     /**
@@ -83,6 +93,7 @@ public class Estudiante {
      */
     public int getEdad() {
         // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -91,6 +102,7 @@ public class Estudiante {
      */
     public void setEdad(int edad) {
         // Aquí va su código.
+        this.edad = edad;
     }
 
     /**
@@ -99,6 +111,13 @@ public class Estudiante {
      */
     public String toString() {
         // Aquí va su código.
+        String cadena = String.format("Nombre   : %s\n" +
+                                      "Cuenta   : %09d\n" +
+                                      "Promedio : %2.2f\n" +
+                                      "Edad     : %d",
+                                      nombre, cuenta, promedio, edad);
+        return cadena;
+
     }
 
     /**
@@ -111,5 +130,17 @@ public class Estudiante {
      */
     public boolean equals(Estudiante estudiante) {
         // Aquí va su código.
+        if (estudiante == null)
+            return false;
+        if ( ! this.nombre .equals(estudiante.nombre))
+            return false;
+        if (this.cuenta != estudiante.cuenta)
+            return false;
+        if (this.promedio != estudiante.promedio)
+            return false;
+        if (this.edad != estudiante.edad)
+            return false;
+        return true;
+
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
index c7609f1..3297ad2 100644
--- a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
@@ -30,6 +30,8 @@ public class ListaEstudiante {
         /* Construye un nodo con un elemento. */
         private Nodo(Estudiante elemento) {
             // Aquí va su código.
+            
+            this.elemento = elemento;           
         }
 
         /**
@@ -38,6 +40,8 @@ public class ListaEstudiante {
          */
         public Nodo getAnterior() {
             // Aquí va su código.
+            return this.anterior;
+
         }
 
         /**
@@ -46,6 +50,7 @@ public class ListaEstudiante {
          */
         public Nodo getSiguiente() {
             // Aquí va su código.
+            return this.siguiente;
         }
 
         /**
@@ -54,6 +59,8 @@ public class ListaEstudiante {
          */
         public Estudiante get() {
             // Aquí va su código.
+            return this.elemento;
+        
         }
     }
 
@@ -70,6 +77,7 @@ public class ListaEstudiante {
      */
     public int getLongitud() {
         // Aquí va su código.
+        return this.longitud;
     }
 
     /**
@@ -78,9 +86,22 @@ public class ListaEstudiante {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        // Aquí va su código. Si la logngituf=0 o cabeza y rabo = 0
+        if (this.longitud == 0)
+            return true;
+        return false;
+    }
+
+    //Metodo auxiliar busca nodo
+    private Nodo buscaNodo(Nodo a, Estudiante elemento) {
+        if (a == null)
+            return null;
+        if(a.get().equals(elemento))
+            return a;
+        return buscaNodo(a.siguiente, elemento);
     }
 
+
     /**
      * Agrega un elemento al final de la lista. Si la lista no tiene elementos,
      * el elemento a agregar será el primero y último.
@@ -89,7 +110,23 @@ public class ListaEstudiante {
      */
     public void agregaFinal(Estudiante elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            return;
+
+       Nodo estudiante = new Nodo(elemento);
+        if (this.esVacia()) {
+          this.cabeza = estudiante;
+          this.rabo = estudiante;
+        } else {
+          Nodo aux = this.rabo;
+          this.rabo = estudiante;
+          estudiante.anterior = aux;
+          aux.siguiente = estudiante;
+        }
+        this.longitud++;
     }
+    
+    
 
     /**
      * Agrega un elemento al inicio de la lista. Si la lista no tiene elementos,
@@ -99,8 +136,20 @@ public class ListaEstudiante {
      */
     public void agregaInicio(Estudiante elemento) {
         // Aquí va su código.
+        if(elemento == null)
+            return;
+        Nodo estudiante = new Nodo(elemento);
+        if (this.esVacia()) {
+        this.cabeza = estudiante;
+        this.rabo = estudiante;
+      } else {
+        Nodo aux = this.cabeza;
+        this.cabeza = estudiante;
+        estudiante.siguiente = aux;
+        aux.anterior = estudiante;
+      }
+      this.longitud++;
     }
-
     /**
      * Inserta un elemento en un índice explícito.
      *
@@ -116,7 +165,25 @@ public class ListaEstudiante {
      *                 si es distinto de <code>null</code>.
      */
     public void inserta(int i, Estudiante elemento) {
-        // Aquí va su código.
+
+         if (i <= 0) {
+          this.agregaInicio(elemento);
+        } else if (i >= this.longitud) {
+          this.agregaFinal(elemento);
+        } else { 
+          Nodo aux = getIesimo(cabeza, i, 1);
+          Nodo nodo = new Nodo(elemento);
+          nodo.anterior = aux;
+          nodo.siguiente = aux.siguiente;
+          nodo.siguiente.anterior = nodo;
+          nodo.anterior.siguiente = nodo;
+          this.longitud++;
+      }
+    }
+    private Nodo getIesimo(Nodo nodo, int i, int j) {
+        if (i == j)
+           return nodo;
+        return getIesimo(nodo.siguiente, i, ++j);
     }
 
     /**
@@ -126,6 +193,23 @@ public class ListaEstudiante {
      */
     public void elimina(Estudiante elemento) {
         // Aquí va su código.
+       Nodo nodo = this.buscaNodo(cabeza, elemento);
+        if(nodo == null)
+            return;
+        else if (cabeza == rabo) {
+            cabeza = rabo = null;
+        }
+        else if (cabeza == nodo){
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+        } else if(rabo == nodo){
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+        } else {
+            nodo.siguiente.anterior = nodo.anterior;
+            nodo.anterior.siguiente = nodo.siguiente; 
+        }
+        longitud--;
     }
 
     /**
@@ -135,6 +219,20 @@ public class ListaEstudiante {
      */
     public Estudiante eliminaPrimero() {
         // Aquí va su código.
+        if(this.esVacia())
+            return null;
+
+        Estudiante estudiante = cabeza.elemento;
+        if (longitud == 1) {
+            cabeza = rabo = null;
+            longitud--;
+            return estudiante;
+        }
+        Nodo aux = cabeza.siguiente;
+        cabeza = aux;
+        cabeza.anterior = null;
+        longitud--;
+        return estudiante;
     }
 
     /**
@@ -144,6 +242,20 @@ public class ListaEstudiante {
      */
     public Estudiante eliminaUltimo() {
         // Aquí va su código.
+         if(this.esVacia())
+            return null;
+
+        Estudiante estudiante = rabo.elemento;
+        if (longitud == 1) {
+            cabeza = rabo = null;
+            longitud--;       
+            return estudiante;
+        }
+        Nodo aux = rabo.anterior;
+        rabo = aux;
+        rabo.siguiente = null;
+        longitud--;
+        return estudiante;
     }
 
     /**
@@ -154,6 +266,11 @@ public class ListaEstudiante {
      */
     public boolean contiene(Estudiante elemento) {
         // Aquí va su código.
+        if(this.buscaNodo(cabeza, elemento) == null)
+           return false;
+       return true;
+
+
     }
 
     /**
@@ -162,6 +279,14 @@ public class ListaEstudiante {
      */
     public ListaEstudiante reversa() {
         // Aquí va su código.
+         ListaEstudiante listaAuxiliar = new ListaEstudiante();
+        return reversa(listaAuxiliar, cabeza);
+    }
+    private ListaEstudiante reversa(ListaEstudiante lista, Nodo nodo){
+        if (nodo == null)
+            return lista;
+        lista.agregaInicio(nodo.get());
+        return reversa (lista, nodo.siguiente);
     }
 
     /**
@@ -170,14 +295,26 @@ public class ListaEstudiante {
      * @return una copiad de la lista.
      */
     public ListaEstudiante copia() {
-        // Aquí va su código.
+        // Aquí va su código. ES con un for para cada uno de las cajitas de la lista
+        ListaEstudiante listaAuxiliar = new ListaEstudiante();
+        return copia(listaAuxiliar, cabeza);
+    }
+    private ListaEstudiante copia(ListaEstudiante lista, Nodo nodo){
+        if (nodo == null)
+            return lista;
+        lista.agregaFinal(nodo.get());
+        return copia(lista, nodo.siguiente);
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        // Aquí va su código. Hacer que los atributos se vean como quiero, esto es cabeza = null, longitud = 0, rabbo = null
+        this.cabeza = null;
+        this.rabo = null;
+        this.longitud=0;
+
     }
 
     /**
@@ -186,7 +323,10 @@ public class ListaEstudiante {
      *         es vacía.
      */
     public Estudiante getPrimero() {
-        // Aquí va su código.
+        // Aquí va su código. #Opinion usar  una variable = this.cabeza.elemento null vacia y no vacia return 'una variable'
+        if(esVacia())
+            return null;
+        return this.cabeza.get();
     }
 
     /**
@@ -195,7 +335,10 @@ public class ListaEstudiante {
      *         es vacía.
      */
     public Estudiante getUltimo() {
-        // Aquí va su código.
+        // Aquí va su código. Es igual que con el primero
+        if (esVacia()) 
+            return null;                    
+        return this.rabo.get();
     }
 
     /**
@@ -207,6 +350,14 @@ public class ListaEstudiante {
      */
     public Estudiante get(int i) {
         // Aquí va su código.
+        if (i <0 || i >= getLongitud())
+            return null;
+        return get(i, cabeza, 0);
+    }
+    private Estudiante get(int i, Nodo nodo, int j){
+        if(i==j)
+            return nodo.elemento;
+        return get(i, nodo.siguiente,j+1);
     }
 
     /**
@@ -217,7 +368,16 @@ public class ListaEstudiante {
      */
     public int indiceDe(Estudiante elemento) {
         // Aquí va su código.
+        return indiceDe(0,cabeza,elemento);
     }
+    private int indiceDe(int i, Nodo nodo, Estudiante elemento){
+        if (nodo == null)
+            return -1;
+        if (nodo.get().equals(elemento))
+            return i;
+        return indiceDe(i+1, nodo.siguiente, elemento);
+    }
+    // 
 
     /**
      * Regresa una representación en cadena de la lista.
@@ -225,6 +385,13 @@ public class ListaEstudiante {
      */
     public String toString() {
         // Aquí va su código.
+        String s = "[";
+        if(this.esVacia())
+           return s + "]";
+        for (int i = 0; i < this.longitud-1; i++)
+            s += String.format("%s, ", this.get(i));
+            s += String.format("%s]", this.get(this.longitud-1));
+            return s;
     }
 
     /**
@@ -234,7 +401,28 @@ public class ListaEstudiante {
      *         <code>false</code> en otro caso.
      */
     public boolean equals(ListaEstudiante lista) {
-        // Aquí va su código.
+        
+        //Aquí va su código. revisar longitud
+        if(lista == null)
+            return false;
+        if(this.longitud != lista.getLongitud())
+            return false;
+        else{
+            Nodo auxA = this.cabeza;
+            Nodo auxB = lista.cabeza;
+            while (auxA != null) {
+                if (auxA.get().equals(auxB.get())){
+                    auxA = auxA.siguiente;
+                    auxB = auxB.siguiente;
+                }
+                else{
+                return false;
+                }   
+        
+            }
+        return true;
+        }
+     
     }
 
     /**
@@ -243,6 +431,7 @@ public class ListaEstudiante {
      */
     public Nodo getCabeza() {
         // Aquí va su código.
+        return this.cabeza;
     }
 
     /**
@@ -251,5 +440,7 @@ public class ListaEstudiante {
      */
     public Nodo getRabo() {
         // Aquí va su código.
+        return this.rabo;
     }
+    
 }
